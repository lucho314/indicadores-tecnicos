services:
  postgres:
    image: postgres:15-alpine
    env_file:
      - ${ENV_FILE:-/etc/dokploy/env/indicadores-tecnicos.env}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./back/init.sql:/docker-entrypoint-initdb.d/init.sql
    # ðŸ‘‡ si no querÃ©s exponer Postgres afuera, comentÃ¡ esta lÃ­nea:
    # ports:
    #   - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U indicadores_user -d indicadores_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  api:
    build:
      context: ./back
      dockerfile: Dockerfile
    env_file:
      - ${ENV_FILE:-/etc/dokploy/env/indicadores-tecnicos.env}
    volumes:
      - ./back/logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    command:
      [
        "python",
        "-m",
        "uvicorn",
        "api.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
        "--reload",
      ]
    networks:
      - app-network

  scheduler:
    build:
      context: ./back
      dockerfile: Dockerfile
    env_file:
      - ${ENV_FILE:-/etc/dokploy/env/indicadores-tecnicos.env}
    volumes:
      - ./back/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    command: ["python", "scheduler.py"]
    networks:
      - app-network

  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://134.65.253.0:8000
    ports:
      - "8001:8001"
    depends_on:
      - api
    networks:
      - app-network

  # ðŸ‘‡ Cliente web sÃºper liviano
  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080" # accedÃ©s en http://TU_VPS:8080
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
