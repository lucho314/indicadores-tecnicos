#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Script de configuraci√≥n post-despliegue para Windows
    
.DESCRIPTION
    Ejecuta la configuraci√≥n autom√°tica despu√©s del despliegue
    Verifica que la base de datos est√© lista y sincroniza datos
    
.PARAMETER Action
    Acci√≥n a ejecutar: setup, test, status, sync
    
.EXAMPLE
    .\deploy.ps1 setup
    .\deploy.ps1 test
    .\deploy.ps1 status
#>

param(
    [Parameter(Mandatory=$false)]
    [ValidateSet("setup", "test", "status", "sync", "help")]
    [string]$Action = "setup"
)

# Colores para output
$Green = "Green"
$Red = "Red"
$Yellow = "Yellow"
$Cyan = "Cyan"

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

function Show-Header {
    Write-ColorOutput "" 
    Write-ColorOutput "üöÄ SISTEMA DE INDICADORES T√âCNICOS - DESPLIEGUE" $Cyan
    Write-ColorOutput "============================================================" $Cyan
    Write-ColorOutput "üìÖ $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" $Yellow
    Write-ColorOutput ""
}

function Show-Help {
    Write-ColorOutput "üìã COMANDOS DISPONIBLES:" $Cyan
    Write-ColorOutput ""
    Write-ColorOutput "  setup   - Configuraci√≥n completa post-despliegue (recomendado)" $Green
    Write-ColorOutput "  test    - Probar an√°lisis completo del sistema" $Green  
    Write-ColorOutput "  status  - Ver estado actual del sistema" $Green
    Write-ColorOutput "  sync    - Sincronizar datos manualmente" $Green
    Write-ColorOutput "  help    - Mostrar esta ayuda" $Green
    Write-ColorOutput ""
    Write-ColorOutput "üí° EJEMPLOS:" $Yellow
    Write-ColorOutput "  .\deploy.ps1 setup    # Configuraci√≥n inicial"
    Write-ColorOutput "  .\deploy.ps1 test     # Probar sistema"
    Write-ColorOutput "  .\deploy.ps1 status   # Ver estado"
    Write-ColorOutput ""
}

function Test-DockerCompose {
    try {
        $result = docker-compose --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ Docker Compose disponible" $Green
            return $true
        }
    } catch {
        Write-ColorOutput "‚ùå Docker Compose no encontrado" $Red
        Write-ColorOutput "üí° Instala Docker Desktop: https://www.docker.com/products/docker-desktop" $Yellow
        return $false
    }
    return $false
}

function Invoke-Setup {
    Write-ColorOutput "üîß EJECUTANDO CONFIGURACI√ìN POST-DESPLIEGUE..." $Cyan
    Write-ColorOutput ""
    
    try {
        Write-ColorOutput "üì¶ Ejecutando script de configuraci√≥n..." $Yellow
        $result = docker-compose run --rm app python deploy_setup.py
        
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "" 
            Write-ColorOutput "üéâ CONFIGURACI√ìN COMPLETADA EXITOSAMENTE" $Green
            Write-ColorOutput "" 
            Write-ColorOutput "üìã Pr√≥ximos pasos:" $Cyan
            Write-ColorOutput "  1. Sistema listo para an√°lisis autom√°tico" $Green
            Write-ColorOutput "  2. Ejecuta: .\deploy.ps1 test (para probar)" $Green
            Write-ColorOutput "  3. Ejecuta: .\deploy.ps1 status (para ver estado)" $Green
        } else {
            Write-ColorOutput "‚ùå Error en configuraci√≥n" $Red
            Write-ColorOutput "üí° Revisa los logs arriba para m√°s detalles" $Yellow
        }
    } catch {
        Write-ColorOutput "‚ùå Error ejecutando configuraci√≥n: $($_.Exception.Message)" $Red
    }
}

function Invoke-Test {
    Write-ColorOutput "üß™ PROBANDO AN√ÅLISIS COMPLETO..." $Cyan
    Write-ColorOutput ""
    
    try {
        Write-ColorOutput "üìä Ejecutando an√°lisis de indicadores..." $Yellow
        $result = docker-compose run --rm app python main.py
        
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "" 
            Write-ColorOutput "‚úÖ AN√ÅLISIS COMPLETADO EXITOSAMENTE" $Green
            Write-ColorOutput "üéØ El sistema est√° funcionando correctamente" $Green
        } else {
            Write-ColorOutput "‚ùå Error en an√°lisis" $Red
            Write-ColorOutput "üí° Ejecuta: .\deploy.ps1 setup (para reconfigurar)" $Yellow
        }
    } catch {
        Write-ColorOutput "‚ùå Error ejecutando an√°lisis: $($_.Exception.Message)" $Red
    }
}

function Invoke-Status {
    Write-ColorOutput "üìä VERIFICANDO ESTADO DEL SISTEMA..." $Cyan
    Write-ColorOutput ""
    
    try {
        Write-ColorOutput "üîç Obteniendo estado del motor de indicadores..." $Yellow
        $result = docker-compose run --rm app python -c "from service.indicators_engine import IndicatorsEngine; import json; print(json.dumps(IndicatorsEngine().get_system_status(), indent=2, default=str))"
        
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "" 
            Write-ColorOutput "‚úÖ ESTADO OBTENIDO EXITOSAMENTE" $Green
        } else {
            Write-ColorOutput "‚ùå Error obteniendo estado" $Red
        }
    } catch {
        Write-ColorOutput "‚ùå Error verificando estado: $($_.Exception.Message)" $Red
    }
}

function Invoke-Sync {
    Write-ColorOutput "üîÑ SINCRONIZANDO DATOS..." $Cyan
    Write-ColorOutput ""
    
    try {
        Write-ColorOutput "üì• Ejecutando sincronizaci√≥n incremental..." $Yellow
        $result = docker-compose run --rm app python -c "from service.klines_service import KlinesService; print(f'Velas sincronizadas: {KlinesService().incremental_sync()}')"
        
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "" 
            Write-ColorOutput "‚úÖ SINCRONIZACI√ìN COMPLETADA" $Green
        } else {
            Write-ColorOutput "‚ùå Error en sincronizaci√≥n" $Red
        }
    } catch {
        Write-ColorOutput "‚ùå Error sincronizando: $($_.Exception.Message)" $Red
    }
}

# Script principal
Show-Header

if (-not (Test-DockerCompose)) {
    exit 1
}

switch ($Action.ToLower()) {
    "setup" {
        Invoke-Setup
    }
    "test" {
        Invoke-Test  
    }
    "status" {
        Invoke-Status
    }
    "sync" {
        Invoke-Sync
    }
    "help" {
        Show-Help
    }
    default {
        Write-ColorOutput "‚ùå Acci√≥n no v√°lida: $Action" $Red
        Show-Help
        exit 1
    }
}

Write-ColorOutput ""
Write-ColorOutput "üîß Para m√°s comandos: .\deploy.ps1 help" $Cyan
Write-ColorOutput "üìñ Documentaci√≥n completa: DEPLOY_INSTRUCTIONS.md" $Cyan
Write-ColorOutput ""